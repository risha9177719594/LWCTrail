import { ComponentInterface } from './component';
import { VM } from './vm';
declare type DataCallback = (value: any) => void;
declare type ConfigValue = Record<string, any>;
interface WireAdapter {
    update(config: ConfigValue, context?: ContextValue): void;
    connect(): void;
    disconnect(): void;
}
declare type WireAdapterSchemaValue = 'optional' | 'required';
export declare function getAdapterToken(adapter: WireAdapterConstructor): string | undefined;
export declare function setAdapterToken(adapter: WireAdapterConstructor, token: string): void;
export declare type ContextValue = Record<string, any>;
export declare type ConfigCallback = (component: ComponentInterface) => ConfigValue;
export interface WireAdapterConstructor {
    new (callback: DataCallback): WireAdapter;
    configSchema?: Record<string, WireAdapterSchemaValue>;
    contextSchema?: Record<string, WireAdapterSchemaValue>;
}
export declare function storeWiredMethodMeta(descriptor: PropertyDescriptor, adapter: WireAdapterConstructor, configCallback: ConfigCallback, hasParams: boolean): void;
export declare function storeWiredFieldMeta(descriptor: PropertyDescriptor, adapter: WireAdapterConstructor, configCallback: ConfigCallback, hasParams: boolean): void;
export declare function installWireAdapters(vm: VM): void;
export declare function connectWireAdapters(vm: VM): void;
export declare function disconnectWireAdapters(vm: VM): void;
export {};
