import { ValueChangedEvent } from './value-changed-event';
declare const DeprecatedWiredElementHost = "$$DeprecatedWiredElementHostKey$$";
/**
 * Registers a wire adapter factory for Lightning Platform.
 * @deprecated
 */
export declare function register(adapterId: any, adapterEventTargetCallback: (eventTarget: WireEventTarget) => void): void;
/**
 * Registers the wire service. noop
 * @deprecated
 */
export declare function registerWireService(): void;
declare type NoArgumentListener = () => void;
interface ConfigListenerArgument {
    [key: string]: any;
}
declare type ConfigListener = (config: ConfigListenerArgument) => void;
declare type WireEventTargetListener = NoArgumentListener | ConfigListener;
export interface WireEventTarget {
    addEventListener: (type: string, listener: WireEventTargetListener) => void;
    removeEventListener: (type: string, listener: WireEventTargetListener) => void;
    dispatchEvent: (evt: ValueChangedEvent) => boolean;
}
interface dataCallback {
    (value: any): void;
    [DeprecatedWiredElementHost]: any;
}
export interface WireAdapterConstructor {
    new (callback: dataCallback): WireAdapter;
}
export declare class WireAdapter {
    private callback;
    private readonly wiredElementHost;
    private connecting;
    private disconnecting;
    private configuring;
    /**
     * Attaching a config listener.
     *
     * The old behavior for attaching a config listener depended on these 3 cases:
     * 1- The wire instance does have any arguments.
     * 2- The wire instance have only static arguments.
     * 3- The wire instance have at least one dynamic argument.
     *
     * In case 1 and 2, the listener should be called immediately.
     * In case 3, the listener needs to wait for the value of the dynamic argument to be updated by the engine.
     *
     * In order to match the above logic, we need to save the last config available:
     * if is undefined, the engine hasn't set it yet, we treat it as case 3. Note: the current logic does not make a distinction between dynamic and static config.
     * if is defined, it means that for the component instance, and this adapter instance, the currentConfig is the proper one
     * and the listener will be called immediately.
     *
     */
    private currentConfig?;
    private isFirstUpdate;
    constructor(callback: dataCallback);
    protected eventTarget: WireEventTarget;
    update(config: Record<string, any>): void;
    connect(): void;
    disconnect(): void;
}
export { ValueChangedEvent };
